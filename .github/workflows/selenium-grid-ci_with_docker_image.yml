name: ✨ Selenium Grid CI with Docker Image

on:
#  push:
#    branches: [ master ]
#  pull_request:
#    branches: [ master ]
  workflow_dispatch:  # 👈 Manual trigger only

jobs:
  run-selenium-tests:
    name: Run on ${{ matrix.browser }} node for ${{ matrix.group }} group
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chrome, firefox]
        group: [smoke, regression]

    env:
      test_browser: ${{ matrix.browser }}
      test_group: ${{ matrix.group }}
      BASE_URL: https://staging.example.com
      ENVIRONMENT: staging


    steps:
      - name: 📥 Checkout source code
        uses: actions/checkout@v4

      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 💾 Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}

      - name: 🛠️ Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: 🐳 Confirm Docker & Docker Compose versions
        run: |
          docker --version
          docker compose version

      - name: 📚 Build Docker Image for Tests
        run: |
          docker build -f docker/Dockerfile -t selenium-tests .

      - name: 🦖 Start Selenium Grid (Docker Compose)
        run: |
          docker compose -f docker/docker-compose.yml up -d selenium-hub ${{ matrix.browser }}

      - name: ⏳ Wait for Selenium Hub
        run: |
            echo "Waiting for Selenium Grid to be ready..."
            for i in {1..20}; do
              if curl -s http://localhost:4444/wd/hub/status | grep -q '"ready":true'; then
                echo "✅ Grid ready."
                break
              fi
              sleep 5
            done

      - name: 🔍 Print env for debug
        run: |
          echo "TEST_BROWSER=$TEST_BROWSER"
          echo "TEST_GROUP=$TEST_GROUP"

      - name: 🔮 Run Tests in Container
        run: |
          docker run --network=host \
          -e TEST_BROWSER=$TEST_BROWSER \
          -e TEST_GROUP=$TEST_GROUP \
          -v ${{ github.workspace }}/allure-results:/app/allure-results \
          --name selenium-tests-${{ matrix.browser }}-${{ matrix.group }} \
          selenium-tests

      - name: 🐳 Show Running Containers (Debug)
        run: docker ps -a

      - name: 📀 Upload Allure Results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.browser }}-${{ matrix.group }}-${{ github.run_id }}
          path: allure-results


  merge-allure-report:
    name: 🔄 Merge Allure Reports
    needs: run-selenium-tests
    runs-on: ubuntu-latest

    steps:
      - name: 🔀 Checkout Repo
        uses: actions/checkout@v4

      - name: 🗃️ Download Allure Artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-results

      - name: 🧵 Merge Allure Results
        run: bash .github/workflows/scripts/merge-allure-results.sh

      - name: 📊 Install Allure CLI
        run: |
          curl -L -o allure.tgz https://github.com/allure-framework/allure2/releases/download/2.34.0/allure-2.34.0.tgz
          tar -xvzf allure.tgz
          sudo mv allure-2.34.0 /opt/allure
          sudo ln -sf /opt/allure/bin/allure /usr/local/bin/allure
          allure --version

      - name: 📊 Generate Allure Report
        run: |
          allure generate merged-results -o merged-allure-report --clean

      - name: 📤 Upload Final Merged Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: merged-allure-report
          path: merged-allure-report

      - name: 📍 Serve Allure Report Locally (Debug Only)
        if: github.event_name == 'workflow_dispatch'
        run: |
          pip install --user httpserver
          cd merged-allure-report && python3 -m http.server 8888

#      - name: 📲 Notify Slack (Optional)
#        if: always()
#        uses: slackapi/slack-github-action@v1.24.0
#        with:
#          payload: |
#            {
#              "text": "Selenium Grid CI complete for ${{ github.repository }}. Report uploaded."
#            }
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
