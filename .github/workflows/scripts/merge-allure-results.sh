#!/usr/bin/env bash

#----------------------------------------------------------------------------------------------------------------------------------------------
#🔹 set -e: Exit immediately on error.
#🔹 set -u: Treat unset variables as an error.
#🔹 set -o pipefail: If any command in a pipeline fails, the whole pipeline fails.
#✅ These settings improve robustness and fail-fast behavior.
set -euo pipefail

#----------------------------------------------------------------------------------------------------------------------------------------------
MERGE_DIR="merged-results"
SOURCE_DIR="downloaded-results"
#SEARCH_WORD="First"


#----------------------------------------------------------------------------------------------------------------------------------------------
# Check if Allure CLI is installed
if ! command -v allure &> /dev/null; then
  echo "⚠️ Allure CLI not found. Installing globally using npm..."
  npm install -g allure-commandline
else
  echo "✅ Allure CLI is already installed: $(allure --version)"
fi


#----------------------------------------------------------------------------------------------------------------------------------------------
#🔹 -p avoids errors if it already exists.
echo "📁 Creating merge folder: $MERGE_DIR"
mkdir -p "$MERGE_DIR"


#----------------------------------------------------------------------------------------------------------------------------------------------
#🔹 find all .json files and search for the keyword.
#🔹 grep -Hn: Print filename and line number for matches.
#🔹 || fallback: If no match is found (exit code 1), print a user-friendly message.
#echo "🔍 Searching for '$SEARCH_WORD' BEFORE merge"
#find "$SOURCE_DIR" -type f -name "*.json" -exec grep -Hn "$SEARCH_WORD" {} \; || echo "❌ No matches before merge"


#----------------------------------------------------------------------------------------------------------------------------------------------
#🔹 If no result folders are found, exit early and show a warning.
echo "🔗 Finding all allure-results folders in: $SOURCE_DIR"
ALLURE_DIRS=$(find "$SOURCE_DIR" -type d -name "allure-results*")
if [[ -z "$ALLURE_DIRS" ]]; then
  echo "❌ No allure-results directories found!"
  exit 1
fi

#----------------------------------------------------------------------------------------------------------------------------------------------
#🔹 Loop through all found allure-results* folders.
#🔹 Copy their contents non-destructively into merged-results:
#What it does:
#This line finds all files (-type f) inside the current $dir, and for each file:
#Executes the cp command to copy the file into the merge directory ($MERGE_DIR)
#-n flag in cp means:
#Don’t overwrite any existing file in the destination (merged-results/)
#{} is a placeholder for the file path found
#\; ends the -exec command (escaped to prevent shell from interpreting it)
for dir in $ALLURE_DIRS; do
  echo "🔄 Merging contents from $dir"
  find "$dir" -type f -exec cp -n {} "$MERGE_DIR"/ \;
done
echo "✅ Merge complete."

#----------------------------------------------------------------------------------------------------------------------------------------------
#echo "🔍 Searching for '$SEARCH_WORD' AFTER merge"
#find "$MERGE_DIR" -type f -name "*.json" -exec grep -Hn "$SEARCH_WORD" {} \; || echo "❌ No matches after merge"
#🟦 find "$MERGE_DIR" -type f -name "*.json"
#This part uses the find command to locate all JSON files in the merged-results directory.
#"$MERGE_DIR" is the root folder to search inside, like merged-results.
#-type f: Only look for regular files (not folders).
#-name "*.json": Only return files that end with .json.
#🟦 -exec grep -Hn "$SEARCH_WORD" {} \;
#This is attached to the find command, and tells it:
#🔍 For each file found, execute:
#grep -Hn "$SEARCH_WORD" <filename>
#Let’s break down the grep flags:
#Flag	Meaning
#-H	Print the filename in the result output
#-n	Print the line number where the match was found
#$SEARCH_WORD	The keyword to search (e.g., "login", "Test")
#{}	Placeholder for each file found by find
#\;	Ends the -exec command (required syntax)
#📄 Example command generated by find:
#grep -Hn "First" merged-results/abc-result.json
#📄 Example output:
#merged-results/abc-result.json:13:"name": "Test Login Functionality"

#----------------------------------------------------------------------------------------------------------------------------------------------
#🔹 Loops over result files and extracts .name and .status using jq.
#🔹 This verifies the integrity of each result file and gives a quick overview of test outcomes.
#echo "📄 Summary of merged test result files:"
#for file in "$MERGE_DIR"/*-result.json; do
#  echo "📄 $file"
#  jq -r '.name, .status' "$file" || echo "⚠️ Invalid JSON in $file"
#done

#----------------------------------------------------------------------------------------------------------------------------------------------
#🔹 Count how many result and container JSON files exist.
#🔹 2>/dev/null: Silently handles cases when no matching files exist.
echo "📦 Total result files: $(ls "$MERGE_DIR"/*-result.json 2>/dev/null | wc -l)"
echo "📦 Total container files: $(ls "$MERGE_DIR"/*-container.json 2>/dev/null | wc -l)"

#----------------------------------------------------------------------------------------------------------------------------------------------
